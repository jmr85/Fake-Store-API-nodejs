{
	"info": {
		"_postman_id": "7eb84766-1a01-4442-96d8-a65e432b0a88",
		"name": "Fake Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10054885",
		"_collection_link": "https://www.postman.com/juanmartinruiz/workspace/fake-store-api/collection/10054885-7eb84766-1a01-4442-96d8-a65e432b0a88?action=share&source=collection_link&creator=10054885"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomName() {\r",
									"    const names = [\"Juan\", \"Mati\", \"Sofi\", \"Flor\", \"Gonza\", \"Lauti\", \"Vicky\", \"Julian\", \"Maria\", \"Adrian\", \"Lucas\", \"Jose\"];\r",
									"    return names[Math.floor(Math.random() * names.length)];\r",
									"}\r",
									"\r",
									"function getRandomEmail(randomName) {\r",
									"    const domains = [\"mail.com\", \"mail2.com\", \"mail3.com\", \"mail4.com\", \"mail5.com\", \"mail6.com\"];\r",
									"    const name = randomName.toLowerCase().replace(/[^a-z]/g, \"\");\r",
									"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
									"    return `${name}@${domain}`;\r",
									"}\r",
									"\r",
									"const randomName = getRandomName();\r",
									"const randomEmail = getRandomEmail(randomName);\r",
									"\r",
									"pm.environment.set(\"signup_name\", randomName);\r",
									"pm.environment.set(\"signup_email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Data presente y con los campos básicos\r",
									"pm.test(\"Data está presente y tiene los campos esperados\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    const user = jsonData.data;\r",
									"    pm.expect(user).to.have.property(\"name\");\r",
									"    pm.expect(user).to.have.property(\"email\");\r",
									"    pm.expect(user).to.have.property(\"_id\");\r",
									"    pm.expect(user).to.have.property(\"role\");\r",
									"    pm.expect(user).to.have.property(\"active\");\r",
									"    pm.expect(user).to.have.property(\"wishlist\");\r",
									"    pm.expect(user).to.have.property(\"addresses\");\r",
									"    pm.expect(user).to.have.property(\"createdAt\");\r",
									"    pm.expect(user).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos correctos en la respuesta signup\", function () {\r",
									"    const user = jsonData.data;\r",
									"\r",
									"    // Token\r",
									"    pm.expect(jsonData.token, \"token debe ser string\").to.be.a(\"string\");\r",
									"\r",
									"    // Usuario\r",
									"    pm.expect(user.name, \"name debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.email, \"email debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.password, \"password debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.role, \"role debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.active, \"active debe ser boolean\").to.be.a(\"boolean\");\r",
									"    pm.expect(user.wishlist, \"wishlist debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(user._id, \"_id debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.addresses, \"addresses debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(user.createdAt, \"createdAt debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.updatedAt, \"updatedAt debe ser string\").to.be.a(\"string\");\r",
									"\r",
									"    // Fechas en formato ISO \r",
									"    pm.expect(new Date(user.createdAt).toISOString(), \"createdAt debe ser fecha ISO\").to.eql(user.createdAt);\r",
									"    pm.expect(new Date(user.updatedAt).toISOString(), \"updatedAt debe ser fecha ISO\").to.eql(user.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{signup_name}}\",\r\n    \"email\": \"{{signup_email}}\",\r\n    \"password\" : \"123456\" ,     \r\n    \"passwordConfirm\" : \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/auth/signup",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt_token\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"admin2s@mail.com\" ,\r\n    \"password\" : \"123456\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"jwt_token\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"maria@mail3.com\" ,\r\n    \"password\" : \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignOut",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"jwt_token\", \"\");\r",
									"\r",
									"pm.test(\"JWT token variable is unset\", function () {\r",
									"    pm.expect(pm.environment.get(\"jwt_token\")).to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/auth/signout",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"signout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User / @Access Admin",
			"item": [
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/63bc92e0a25f49a1217f2c6e",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"63bc92e0a25f49a1217f2c6e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Oscar\",\r\n    \"email\" : \"oscar@mail.com\",\r\n    \"password\" : \"123456\" ,\r\n    \"passwordConfirm\" : \"123456\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/users/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n   \"name\": \"Billy\",\r\n    \"email\" : \"billy@mail.com\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/users/63bc81973e721990a8cc501f",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"63bc81973e721990a8cc501f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/63bc81973e721990a8cc501f",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"63bc81973e721990a8cc501f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Pasword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"currentPassword\" : \"1234567\" ,\r\n    \"password\" : \"123456\" ,\r\n    \"passwordConfirm\" : \"123456\" \r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/users/changePassword/63bc802d3e721990a8cc5005",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"changePassword",
								"63bc802d3e721990a8cc5005"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logged User",
			"item": [
				{
					"name": "Get Logged User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/getMe",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"getMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Logged User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Juani2\",\r\n    \"email\" : \"juani2@mail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/users/updateMe",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"updateMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate Logged Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/deleteMe",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"deleteMe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Logged User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/users/activeMe",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"users",
								"activeMe"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Create a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Dog Food 1",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/YUSSEF/Desktop/Dog FOOD.png"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/categories/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/D:/Picture/2781354.jpg"
								},
								{
									"key": "name",
									"value": "newcates",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/categories/63bc89743e721990a8cc5067",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"63bc89743e721990a8cc5067"
							],
							"query": [
								{
									"key": "name",
									"value": "aaaaaaaaaaaaa",
									"disabled": true
								},
								{
									"key": "image",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/categories/63bc8a5a3e721990a8cc5074",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"63bc8a5a3e721990a8cc5074"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/categories/63bc93fca25f49a1217f2c8d",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"63bc93fca25f49a1217f2c8d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/categories?limit=100",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products by category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/categories/63bc8d063e721990a8cc5085/products",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"63bc8d063e721990a8cc5085",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Create a product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Kibbles 222 'n Bits Original Savory Beef & Chicken Flavors Dry Dog Food",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Give your pup the nutrition and flavor he loves with the Kibbles 'n Bits Original Savory Beef & Chicken Flavors Dry Dog Food. This formula packs plenty of meaty taste into a blend of crunchy kibble and soft meaty bits made with the flavors of beef and chicken. It’s loaded with high-quality protein to help support strong muscles, plus vitamins, minerals and antioxidants so it’s a complete and balanced diet for adults. Plus, it’s proudly made in the USA so it’s a satisfying meal you can feel good about serving your dog every day!\n\n",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "80",
									"type": "text"
								},
								{
									"key": "price",
									"value": "26.83",
									"type": "text"
								},
								{
									"key": "category",
									"value": "63bc88ec3e721990a8cc5064",
									"type": "text"
								},
								{
									"key": "imageCover",
									"type": "file",
									"src": "/C:/Users/YUSSEF/Desktop/1.jpg"
								},
								{
									"key": "images",
									"type": "file",
									"src": [
										"/C:/Users/YUSSEF/Desktop/2.jpg",
										"/C:/Users/YUSSEF/Desktop/3.webp",
										"/C:/Users/YUSSEF/Desktop/4.jpg",
										"/C:/Users/YUSSEF/Desktop/5.jpg"
									]
								},
								{
									"key": "priceAfterDiscount",
									"value": "25.49",
									"type": "text"
								},
								{
									"key": "color",
									"value": "Navy",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "asxs",
									"type": "text"
								},
								{
									"key": "imageCover",
									"type": "file",
									"src": "/C:/Users/YUSSEF/Desktop/Manga+/Picture/Eternal Force.jpg",
									"disabled": true
								},
								{
									"key": "images",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "priceAfterDiscount",
									"value": "450",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/products/63bc8e693e721990a8cc508d/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"63bc8e693e721990a8cc508d",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/products/63bc8e693e721990a8cc508d",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"63bc8e693e721990a8cc508d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validar existencia de campos requeridos\r",
									"pm.test(\"Todos los productos tienen los campos requeridos\", function () {\r",
									"    jsonData.data.forEach(function(product, i) {\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo _id\").to.have.property(\"_id\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo title\").to.have.property(\"title\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo slug\").to.have.property(\"slug\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo description\").to.have.property(\"description\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo quantity\").to.have.property(\"quantity\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo sold\").to.have.property(\"sold\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo price\").to.have.property(\"price\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo colors\").to.have.property(\"colors\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo category\").to.have.property(\"category\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo subcategories\").to.have.property(\"subcategories\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo ratingsAverage\").to.have.property(\"ratingsAverage\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo ratingsQuantity\").to.have.property(\"ratingsQuantity\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo createdAt\").to.have.property(\"createdAt\");\r",
									"        pm.expect(product, \"Producto #\" + (i+1) + \" debe tener campo updatedAt\").to.have.property(\"updatedAt\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Validar tipo de campos requeridos\r",
									"pm.test(\"Todos los productos tienen los tipos correctos en los campos requeridos\", function () {\r",
									"    jsonData.data.forEach(function(product, i) {\r",
									"        pm.expect(product._id, \"Producto #\" + (i+1) + \" campo _id debe ser string\").to.be.a(\"string\");\r",
									"        pm.expect(product.title, \"Producto #\" + (i+1) + \" campo title debe ser string\").to.be.a(\"string\");\r",
									"        pm.expect(product.slug, \"Producto #\" + (i+1) + \" campo slug debe ser string\").to.be.a(\"string\");\r",
									"        pm.expect(product.description, \"Producto #\" + (i+1) + \" campo description debe ser string\").to.be.a(\"string\");\r",
									"        pm.expect(product.quantity, \"Producto #\" + (i+1) + \" campo quantity debe ser number\").to.be.a(\"number\");\r",
									"        pm.expect(product.sold, \"Producto #\" + (i+1) + \" campo sold debe ser number\").to.be.a(\"number\");\r",
									"        pm.expect(product.price, \"Producto #\" + (i+1) + \" campo price debe ser number\").to.be.a(\"number\");\r",
									"        pm.expect(product.colors, \"Producto #\" + (i+1) + \" campo colors debe ser array\").to.be.an(\"array\");\r",
									"        // category puede ser null, por eso no se valida tipo exacto\r",
									"        pm.expect(product.subcategories, \"Producto #\" + (i+1) + \" campo subcategories debe ser array\").to.be.an(\"array\");\r",
									"        pm.expect(product.ratingsAverage, \"Producto #\" + (i+1) + \" campo ratingsAverage debe ser number\").to.be.a(\"number\");\r",
									"        pm.expect(product.ratingsQuantity, \"Producto #\" + (i+1) + \" campo ratingsQuantity debe ser number\").to.be.a(\"number\");\r",
									"        pm.expect(product.createdAt, \"Producto #\" + (i+1) + \" campo createdAt debe ser string\").to.be.a(\"string\");\r",
									"        pm.expect(product.updatedAt, \"Producto #\" + (i+1) + \" campo updatedAt debe ser string\").to.be.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// pm.test(\"Todos los productos tienen campos obligatorios y tipos correctos\", function () {\r",
									"//     jsonData.data.forEach(function(product, i) {\r",
									"//         pm.expect(product, \"Producto #\" + (i+1)).to.have.property(\"_id\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"slug\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
									"//         pm.expect(product).to.have.property(\"sold\").that.is.a(\"number\");\r",
									"//         pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
									"//         pm.expect(product).to.have.property(\"colors\").that.is.an(\"array\");\r",
									"//         pm.expect(product).to.have.property(\"category\"); // Puede ser null o string\r",
									"//         pm.expect(product).to.have.property(\"subcategories\").that.is.an(\"array\");\r",
									"//         pm.expect(product).to.have.property(\"ratingsAverage\").that.is.a(\"number\");\r",
									"//         pm.expect(product).to.have.property(\"ratingsQuantity\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
									"//         pm.expect(product).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
									"//     });\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/products",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"disabled": true
								},
								{
									"key": "page",
									"value": "2",
									"disabled": true
								},
								{
									"key": "RatingsAverage[gte]",
									"value": "80",
									"disabled": true
								},
								{
									"key": "sortedBy",
									"value": "price",
									"disabled": true
								},
								{
									"key": "ratingsAverage[gte]",
									"value": "4",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "Flavors",
									"disabled": true
								},
								{
									"key": "ratingsAverage[gte]",
									"value": "4",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "title,price",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"El producto contiene todos los campos esperados\", function () {\r",
									"    const product = jsonData.data;\r",
									"\r",
									"    pm.expect(product, \"Falta el campo _id\").to.have.property(\"_id\");\r",
									"    pm.expect(product, \"Falta el campo title\").to.have.property(\"title\");\r",
									"    pm.expect(product, \"Falta el campo slug\").to.have.property(\"slug\");\r",
									"    pm.expect(product, \"Falta el campo description\").to.have.property(\"description\");\r",
									"    pm.expect(product, \"Falta el campo quantity\").to.have.property(\"quantity\");\r",
									"    pm.expect(product, \"Falta el campo sold\").to.have.property(\"sold\");\r",
									"    pm.expect(product, \"Falta el campo price\").to.have.property(\"price\");\r",
									"    pm.expect(product, \"Falta el campo colors\").to.have.property(\"colors\");\r",
									"    pm.expect(product, \"Falta el campo imageCover\").to.have.property(\"imageCover\");\r",
									"    pm.expect(product, \"Falta el campo images\").to.have.property(\"images\");\r",
									"    pm.expect(product, \"Falta el campo category\").to.have.property(\"category\");\r",
									"    pm.expect(product, \"Falta el campo subcategories\").to.have.property(\"subcategories\");\r",
									"    pm.expect(product, \"Falta el campo ratingsAverage\").to.have.property(\"ratingsAverage\");\r",
									"    pm.expect(product, \"Falta el campo ratingsQuantity\").to.have.property(\"ratingsQuantity\");\r",
									"    pm.expect(product, \"Falta el campo createdAt\").to.have.property(\"createdAt\");\r",
									"    pm.expect(product, \"Falta el campo updatedAt\").to.have.property(\"updatedAt\");\r",
									"    pm.expect(product, \"Falta el campo __v\").to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"pm.test(\"Los campos del producto tienen el tipo de dato correcto\", function () {\r",
									"    const product = jsonData.data;\r",
									"\r",
									"    pm.expect(product._id, \"_id debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.title, \"title debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.slug, \"slug debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.description, \"description debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.quantity, \"quantity debe ser number\").to.be.a(\"number\");\r",
									"    pm.expect(product.sold, \"sold debe ser number\").to.be.a(\"number\");\r",
									"    pm.expect(product.price, \"price debe ser number\").to.be.a(\"number\");\r",
									"    pm.expect(product.colors, \"colors debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(product.imageCover, \"imageCover debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.images, \"images debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(product.category === null || typeof product.category === \"string\", \"category debe ser null o string\").to.be.true;\r",
									"    pm.expect(product.subcategories, \"subcategories debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(product.ratingsAverage, \"ratingsAverage debe ser number\").to.be.a(\"number\");\r",
									"    pm.expect(product.ratingsQuantity, \"ratingsQuantity debe ser number\").to.be.a(\"number\");\r",
									"    pm.expect(product.createdAt, \"createdAt debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.updatedAt, \"updatedAt debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(product.__v, \"__v debe ser number\").to.be.a(\"number\");\r",
									"\r",
									"    // Validación de formato de fechas ISO (opcional)\r",
									"    pm.expect(new Date(product.createdAt).toISOString(), \"createdAt debe ser fecha ISO\").to.eql(product.createdAt);\r",
									"    pm.expect(new Date(product.updatedAt).toISOString(), \"updatedAt debe ser fecha ISO\").to.eql(product.updatedAt);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:authorization-secret}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/products/65c4b721f9c3de43d46ad6ed",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"65c4b721f9c3de43d46ad6ed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Related Products Base in Product_Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/products/related/63adad1c279142448c05b4ff",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"related",
								"63adad1c279142448c05b4ff"
							]
						}
					},
					"response": []
				},
				{
					"name": "search Product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"filters\" : {\r\n        \"price\" : [4 , 10 ]      \r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/products/search",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subcategory",
			"item": [
				{
					"name": "Create Subcategory",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Coats&Jackets\", \r\n    \"category\" : \"63b9d58a01dc8bc2a732c34e\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/subcategories/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"subcategories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Subcategory 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Puppy\", \r\n    \"category\" : \"63bc93fca25f49a1217f2c8d\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/subcategories/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"subcategories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Subcategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"asa+vvfvsasacs\",\r\n    \"category\" : \"636e61a8aa2719937c3cf0dc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/subcategories/63ad84799d81f67d3e917959",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"subcategories",
								"63ad84799d81f67d3e917959"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete SubCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/subcategories/63ad84799d81f67d3e917959/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"subcategories",
								"63ad84799d81f67d3e917959",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific subCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:authorization-secret}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/subcategories/686dd2739ffa0e447abc8fdf",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"subcategories",
								"686dd2739ffa0e447abc8fdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Subcategories for Specific Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/categories/63bc93fca25f49a1217f2c8d/subcategories?limit=50",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"63bc93fca25f49a1217f2c8d",
								"subcategories"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Subcategory on Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Men-Tests\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/categories/636e61a8aa2719937c3cf0dc/subcategories",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"categories",
								"636e61a8aa2719937c3cf0dc",
								"subcategories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Brand",
			"item": [
				{
					"name": "Create Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "youssef  vsssc",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/D:/Picture/2781354.jpg"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/brands/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"brands",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "youssef korssxc",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/D:/Picture/2781354.jpg"
								}
							]
						},
						"url": {
							"raw": "{{URL}}/api/brands/63ad84ed9d81f67d3e91797a",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"brands",
								"63ad84ed9d81f67d3e91797a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/brands/63ad84ed9d81f67d3e91797a",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"brands",
								"63ad84ed9d81f67d3e91797a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:authorization-secret}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/brands/63bc940aa25f49a1217f2c92",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"brands",
								"63bc940aa25f49a1217f2c92"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/brands",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"brands"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "11",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Create  Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Good Product 1\" ,\r\n    \"ratings\" : 3 ,\r\n    \"product\" : \"65c4b721f9c3de43d46ad6ed\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/reviews/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"updating Reviews 1\",\r\n    \"ratings\" : 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/reviews/686da30afae19c8ee062d0fd",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"reviews",
								"686da30afae19c8ee062d0fd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/reviews/686da30afae19c8ee062d0fd",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"reviews",
								"686da30afae19c8ee062d0fd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:authorization-secret}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/reviews/686da30afae19c8ee062d0fd",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"reviews",
								"686da30afae19c8ee062d0fd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/reviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"reviews"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "11",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all reviews on specifique products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/products/65c4b721f9c3de43d46ad6ed/reviews",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"products",
								"65c4b721f9c3de43d46ad6ed",
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Wishlist",
			"item": [
				{
					"name": "Add Product To Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\" : \"65c4b721f9c3de43d46ad6ec\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/wishlist/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"wishlist",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "remove Product From Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/wishlist/63adad1c279142448c05b4ff/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"wishlist",
								"63adad1c279142448c05b4ff",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Logged User Wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/wishlist/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"wishlist",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Addressess",
			"item": [
				{
					"name": "add User Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"alias\" : \"Home\" ,\r\n    \"details\" : \"985 Pinnickinnick Street\" ,\r\n    \"phone\" : \"615-827-2462\" ,\r\n    \"city\" : \"Sayreville\" ,\r\n    \"postalCode\" : \"08872\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/addressess/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"addressess",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "remove User Adress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/addressess/63b043ee40ee97436d9d5b6c",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"addressess",
								"63b043ee40ee97436d9d5b6c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  User Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/addressess/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"addressess",
								""
							]
						},
						"description": "access only \"user\" role"
					},
					"response": []
				}
			]
		},
		{
			"name": "Coupon",
			"item": [
				{
					"name": "Create Coupon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"HAPPY24\" ,\r\n    \"expire\" : \"2024/12/01\" ,\r\n    \"discount\" : 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/coupons/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Coupon 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"HAPPY25\" ,\r\n    \"expire\" : \"2025/12/01\" ,\r\n    \"discount\" : 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/coupons/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific coupon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"sas\" ,\r\n    \"discount\" : 3069\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/coupons/637e861240e73a9c2ae967d4/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons",
								"637e861240e73a9c2ae967d4",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific coupon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/coupons/637e862940e73a9c2ae967d8",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons",
								"637e862940e73a9c2ae967d8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of coupons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/coupons",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific coupon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/coupons/686db8e3066f401e4f8009ea",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"coupons",
								"686db8e3066f401e4f8009ea"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add product to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\" : \"65c4b721f9c3de43d46ad6ee\" ,\r\n    \"color\" : \"Red\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/cart/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get Logged User Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/cart/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific cart item quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\" : 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/cart/63b07edf77cfe372680db07c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"cart",
								"63b07edf77cfe372680db07c"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove Specific Cart Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/cart/686da4aafae19c8ee062d123",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								"686da4aafae19c8ee062d123"
							]
						}
					},
					"response": []
				},
				{
					"name": "clear logged user cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/cart/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply Coupon On Shopping Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"coupon\" : \"HAPPY25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/cart/applyCoupon",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								"applyCoupon"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Cash Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/orders/63a1a10902d718a2ad1640da/6362a1ff3b0236acba300bb3",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"orders",
								"63a1a10902d718a2ad1640da",
								"6362a1ff3b0236acba300bb3"
							]
						},
						"description": "## Add Order Description\n\nThis endpoint allows users to add a new order to the system. The request is made via an HTTP POST method, targeting a specific order identified by the unique order ID.\n\n### Request Parameters\n\nThe request body must include the following parameters:\n\n- **orderId** (string): The unique identifier for the order being processed.\n    \n- **productId** (string): The unique identifier for the product being ordered.\n    \n- **quantity** (integer): The quantity of the product being ordered.\n    \n- **customerId** (string): The unique identifier for the customer placing the order.\n    \n- **shippingAddress** (string): The address where the order will be shipped.\n    \n\n### Expected Response\n\nUpon successfully adding the order, the API will return a response containing:\n\n- **status** (string): Indicates the success or failure of the order addition.\n    \n- **message** (string): A descriptive message providing additional context about the operation.\n    \n- **orderDetails** (object): An object containing details of the newly created order, including the order ID, product ID, quantity, and customer information.\n    \n\n### Notes\n\n- Ensure that all required parameters are included in the request to avoid validation errors.\n    \n- The order ID and product ID must correspond to existing records in the database.\n    \n- This endpoint is crucial for maintaining the integrity of order processing within the application.\n    \n\nMake sure to handle any errors returned by the API gracefully in your application."
					},
					"response": []
				},
				{
					"name": "Create Cash Order 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/orders/686da4aafae19c8ee062d123/686d828c6816479350551505",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"orders",
								"686da4aafae19c8ee062d123",
								"686d828c6816479350551505"
							]
						},
						"description": "## Add Order Description\n\nThis endpoint allows users to add a new order to the system. The request is made via an HTTP POST method, targeting a specific order identified by the unique order ID.\n\n### Request Parameters\n\nThe request body must include the following parameters:\n\n- **orderId** (string): The unique identifier for the order being processed.\n    \n- **productId** (string): The unique identifier for the product being ordered.\n    \n- **quantity** (integer): The quantity of the product being ordered.\n    \n- **customerId** (string): The unique identifier for the customer placing the order.\n    \n- **shippingAddress** (string): The address where the order will be shipped.\n    \n\n### Expected Response\n\nUpon successfully adding the order, the API will return a response containing:\n\n- **status** (string): Indicates the success or failure of the order addition.\n    \n- **message** (string): A descriptive message providing additional context about the operation.\n    \n- **orderDetails** (object): An object containing details of the newly created order, including the order ID, product ID, quantity, and customer information.\n    \n\n### Notes\n\n- Ensure that all required parameters are included in the request to avoid validation errors.\n    \n- The order ID and product ID must correspond to existing records in the database.\n    \n- This endpoint is crucial for maintaining the integrity of order processing within the application.\n    \n\nMake sure to handle any errors returned by the API gracefully in your application."
					},
					"response": []
				}
			]
		},
		{
			"name": "Order Creation E2E",
			"item": [
				{
					"name": "SignUp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomName() {\r",
									"    const names = [\"Juan\", \"Mati\", \"Sofi\", \"Flor\", \"Gonza\", \"Lauti\", \"Vicky\", \"Julian\", \"Maria\", \"Adrian\", \"Lucas\", \"Jose\"];\r",
									"    return names[Math.floor(Math.random() * names.length)];\r",
									"}\r",
									"\r",
									"function getRandomEmail(randomName) {\r",
									"    const domains = [\"mail.com\", \"mail2.com\", \"mail3.com\", \"mail4.com\", \"mail5.com\", \"mail6.com\"];\r",
									"    const name = randomName.toLowerCase().replace(/[^a-z]/g, \"\");\r",
									"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
									"    return `${name}@${domain}`;\r",
									"}\r",
									"\r",
									"const randomName = getRandomName();\r",
									"const randomEmail = getRandomEmail(randomName);\r",
									"\r",
									"pm.environment.set(\"signup_name\", randomName);\r",
									"pm.environment.set(\"signup_email\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Data presente y con los campos básicos\r",
									"pm.test(\"Data está presente y tiene los campos esperados\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    const user = jsonData.data;\r",
									"    pm.expect(user).to.have.property(\"name\");\r",
									"    pm.expect(user).to.have.property(\"email\");\r",
									"    pm.expect(user).to.have.property(\"_id\");\r",
									"    pm.expect(user).to.have.property(\"role\");\r",
									"    pm.expect(user).to.have.property(\"active\");\r",
									"    pm.expect(user).to.have.property(\"wishlist\");\r",
									"    pm.expect(user).to.have.property(\"addresses\");\r",
									"    pm.expect(user).to.have.property(\"createdAt\");\r",
									"    pm.expect(user).to.have.property(\"updatedAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tipos de datos correctos en la respuesta signup\", function () {\r",
									"    const user = jsonData.data;\r",
									"\r",
									"    // Token\r",
									"    pm.expect(jsonData.token, \"token debe ser string\").to.be.a(\"string\");\r",
									"\r",
									"    // Usuario\r",
									"    pm.expect(user.name, \"name debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.email, \"email debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.password, \"password debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.role, \"role debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.active, \"active debe ser boolean\").to.be.a(\"boolean\");\r",
									"    pm.expect(user.wishlist, \"wishlist debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(user._id, \"_id debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.addresses, \"addresses debe ser array\").to.be.an(\"array\");\r",
									"    pm.expect(user.createdAt, \"createdAt debe ser string\").to.be.a(\"string\");\r",
									"    pm.expect(user.updatedAt, \"updatedAt debe ser string\").to.be.a(\"string\");\r",
									"\r",
									"    // Fechas en formato ISO\r",
									"    pm.expect(new Date(user.createdAt).toISOString(), \"createdAt debe ser fecha ISO\").to.eql(user.createdAt);\r",
									"    pm.expect(new Date(user.updatedAt).toISOString(), \"updatedAt debe ser fecha ISO\").to.eql(user.updatedAt);\r",
									"});\r",
									"\r",
									"const body = JSON.parse(request.data);\r",
									"pm.environment.set(\"new_user_email\", body.email);\r",
									"pm.environment.set(\"new_user_password\", body.password);\r",
									"\r",
									"// Guarda el user_id retornado en la respuesta\r",
									"pm.environment.set(\"user_id\", pm.response.json().data._id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{signup_name}}\",\r\n    \"email\": \"{{signup_email}}\",\r\n    \"password\" : \"123456\" ,     \r\n    \"passwordConfirm\" : \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/auth/signup",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {\r",
									"    pm.environment.set(\"jwt_token\", pm.response.json().token);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token exists and is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.exist;\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Tiempo de respuesta menor a 1 segundo\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{new_user_email}}\",\r\n    \"password\": \"{{new_user_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add product to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"cart_id\", pm.response.json().data._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"productId\" : \"65c4b721f9c3de43d46ad6eb\" ,\r\n    \"color\" : \"Red\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/cart/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"cart",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Cash Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/orders/{{cart_id}}/{{user_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"orders",
								"{{cart_id}}",
								"{{user_id}}"
							]
						},
						"description": "## Add Order Description\n\nThis endpoint allows users to add a new order to the system. The request is made via an HTTP POST method, targeting a specific order identified by the unique order ID.\n\n### Request Parameters\n\nThe request body must include the following parameters:\n\n- **orderId** (string): The unique identifier for the order being processed.\n    \n- **productId** (string): The unique identifier for the product being ordered.\n    \n- **quantity** (integer): The quantity of the product being ordered.\n    \n- **customerId** (string): The unique identifier for the customer placing the order.\n    \n- **shippingAddress** (string): The address where the order will be shipped.\n    \n\n### Expected Response\n\nUpon successfully adding the order, the API will return a response containing:\n\n- **status** (string): Indicates the success or failure of the order addition.\n    \n- **message** (string): A descriptive message providing additional context about the operation.\n    \n- **orderDetails** (object): An object containing details of the newly created order, including the order ID, product ID, quantity, and customer information.\n    \n\n### Notes\n\n- Ensure that all required parameters are included in the request to avoid validation errors.\n    \n- The order ID and product ID must correspond to existing records in the database.\n    \n- This endpoint is crucial for maintaining the integrity of order processing within the application.\n    \n\nMake sure to handle any errors returned by the API gracefully in your application."
					},
					"response": []
				},
				{
					"name": "SignOut",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"jwt_token\", \"\");\r",
									"\r",
									"pm.test(\"JWT token variable is unset\", function () {\r",
									"    pm.expect(pm.environment.get(\"jwt_token\")).to.equal(\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/auth/signout",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"auth",
								"signout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}